{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers(options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const {\n      Peers\n    } = await res.json();\n    return (Peers || []).map(peer => {\n      return {\n        addr: new Multiaddr(peer.Addr),\n        peer: peer.Peer,\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      };\n    });\n  }\n  return peers;\n});","map":{"version":3,"names":["Multiaddr","require","configure","toUrlSearchParams","module","exports","api","peers","options","res","post","signal","searchParams","headers","Peers","json","map","peer","addr","Addr","Peer","muxer","Muxer","latency","Latency","streams","Streams","direction","Direction","undefined"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/swarm/peers.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: new Multiaddr(peer.Addr),\n        peer: peer.Peer,\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,KAAKA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAClC,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,aAAa,EAAE;MACxCC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAET,iBAAiB,CAACK,OAAO,CAAC;MACxCK,OAAO,EAAEL,OAAO,CAACK;IACnB,CAAC,CAAC;;IAEF;IACA,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;IAElC,OAAO,CAACD,KAAK,IAAI,EAAE,EAAEE,GAAG,CAACC,IAAI,IAAI;MAC/B,OAAO;QACLC,IAAI,EAAE,IAAIlB,SAAS,CAACiB,IAAI,CAACE,IAAI,CAAC;QAC9BF,IAAI,EAAEA,IAAI,CAACG,IAAI;QACfC,KAAK,EAAEJ,IAAI,CAACK,KAAK;QACjBC,OAAO,EAAEN,IAAI,CAACO,OAAO;QACrBC,OAAO,EAAER,IAAI,CAACS,OAAO;QACrBC,SAAS,EAAEV,IAAI,CAACW,SAAS,IAAI,IAAI,GAAGC,SAAS,GAAGZ,IAAI,CAACW,SAAS,KAAK,CAAC,GAAG,SAAS,GAAG;MACrF,CAAC;IACH,CAAC,CAAC;EACJ;EACA,OAAOrB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}