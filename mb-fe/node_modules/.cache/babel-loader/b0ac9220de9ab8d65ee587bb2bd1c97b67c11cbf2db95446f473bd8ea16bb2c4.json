{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get(cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map(( /** @type {any} */link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    };\n  }\n  return get;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","fromString","uint8ArrayFromString","module","exports","api","get","cid","options","res","post","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","data","json","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAM;EAAEG,UAAU,EAAEC;AAAqB,CAAC,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;;AAE/E;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAGL,SAAS,CAACM,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,YAAY,EAAE;MACvCC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAG,GAAEN,GAAG,YAAYO,UAAU,GAAGjB,GAAG,CAACkB,MAAM,CAACR,GAAG,CAAC,GAAGA,GAAI,EAAC;QAC3DS,YAAY,EAAE,QAAQ;QACtB,GAAGR;MACL,CAAC,CAAC;MACFS,OAAO,EAAET,OAAO,CAACS;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAE7B,OAAO;MACLC,IAAI,EAAElB,oBAAoB,CAACgB,IAAI,CAACE,IAAI,EAAE,WAAW,CAAC;MAClDC,KAAK,EAAE,CAACH,IAAI,CAACG,KAAK,IAAI,EAAE,EAAEC,GAAG,CAAC,EAAC,kBAAmBC,IAAI,MAAM;QAC1DC,IAAI,EAAED,IAAI,CAACC,IAAI;QACfC,IAAI,EAAE5B,GAAG,CAAC6B,KAAK,CAACH,IAAI,CAACE,IAAI,CAAC;QAC1BE,KAAK,EAAEJ,IAAI,CAACK;MACd,CAAC,CAAC;IACJ,CAAC;EACH;EACA,OAAOtB,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}