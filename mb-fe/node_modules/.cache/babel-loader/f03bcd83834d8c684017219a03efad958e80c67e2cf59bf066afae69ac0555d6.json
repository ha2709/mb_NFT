{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst {\n  FinalPeer\n} = require('./response-types');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function findPeer(peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const {\n          ID,\n          Addrs\n        } = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(( /** @type {string} **/a) => new Multiaddr(a))\n        };\n      }\n    }\n    throw new Error('not found');\n  }\n  return findPeer;\n});","map":{"version":3,"names":["Multiaddr","require","configure","toUrlSearchParams","FinalPeer","module","exports","api","findPeer","peerId","options","res","post","signal","searchParams","arg","headers","data","ndjson","Type","Responses","ID","Addrs","id","addrs","map","a","Error"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/dht/find-peer.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { FinalPeer } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const { ID, Addrs } = data.Responses[0]\n        return {\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return findPeer\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAM;EAAEG;AAAU,CAAC,GAAGH,OAAO,CAAC,kBAAkB,CAAC;;AAEjD;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,QAAQA,CAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,cAAc,EAAE;MACzCC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAEN,MAAM;QACX,GAAGC;MACL,CAAC,CAAC;MACFM,OAAO,EAAEN,OAAO,CAACM;IACnB,CAAC,CAAC;IAEF,WAAW,MAAMC,IAAI,IAAIN,GAAG,CAACO,MAAM,CAAC,CAAC,EAAE;MACrC,IAAID,IAAI,CAACE,IAAI,KAAKf,SAAS,IAAIa,IAAI,CAACG,SAAS,EAAE;QAC7C,MAAM;UAAEC,EAAE;UAAEC;QAAM,CAAC,GAAGL,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;QACvC,OAAO;UACLG,EAAE,EAAEF,EAAE;UACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEG,GAAG,CAAC,EAAC,sBAAuBC,CAAC,KAAK,IAAI1B,SAAS,CAAC0B,CAAC,CAAC;QACzE,CAAC;MACH;IACF;IAEA,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;EAC9B;EAEA,OAAOnB,QAAQ;AACjB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}