{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst {\n  Provider\n} = require('./response-types');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function* findProvs(cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const {\n          ID,\n          Addrs\n        } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(( /** @type {string} **/a) => new Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n  return findProvs;\n});","map":{"version":3,"names":["Multiaddr","require","configure","toUrlSearchParams","Provider","module","exports","api","findProvs","cid","options","res","post","signal","searchParams","arg","toString","headers","message","ndjson","Type","Responses","ID","Addrs","id","addrs","map","a"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/dht/find-provs.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Provider } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const { ID, Addrs } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n          }\n        }\n      }\n    }\n  }\n\n  return findProvs\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAM;EAAEG;AAAS,CAAC,GAAGH,OAAO,CAAC,kBAAkB,CAAC;;AAEhD;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,SAASA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,eAAe,EAAE;MAC1CC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAEN,GAAG,CAACO,QAAQ,CAAC,CAAC;QACnB,GAAGN;MACL,CAAC,CAAC;MACFO,OAAO,EAAEP,OAAO,CAACO;IACnB,CAAC,CAAC;IAEF,WAAW,MAAMC,OAAO,IAAIP,GAAG,CAACQ,MAAM,CAAC,CAAC,EAAE;MACxC,IAAID,OAAO,CAACE,IAAI,KAAKhB,QAAQ,IAAIc,OAAO,CAACG,SAAS,EAAE;QAClD,KAAK,MAAM;UAAEC,EAAE;UAAEC;QAAM,CAAC,IAAIL,OAAO,CAACG,SAAS,EAAE;UAC7C,MAAM;YACJG,EAAE,EAAEF,EAAE;YACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAEG,GAAG,CAAC,EAAC,sBAAuBC,CAAC,KAAK,IAAI3B,SAAS,CAAC2B,CAAC,CAAC;UACzE,CAAC;QACH;MACF;IACF;EACF;EAEA,OAAOnB,SAAS;AAClB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}