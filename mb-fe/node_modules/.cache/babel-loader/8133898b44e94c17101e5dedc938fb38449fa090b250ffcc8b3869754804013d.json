{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer(peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map(( /** @type {{ '/': string }} */k) => CID.parse(k['/']));\n  }\n  return wantlistForPeer;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","wantlistForPeer","peerId","options","res","post","signal","searchParams","peer","toString","headers","json","Keys","map","k","parse"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,eAAeA,CAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpD,MAAMC,GAAG,GAAG,MAAM,CAAC,MAAMJ,GAAG,CAACK,IAAI,CAAC,kBAAkB,EAAE;MACpDC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEV,iBAAiB,CAAC;QAC9B,GAAGM,OAAO;QACVK,IAAI,EAAEN,MAAM,CAACO,QAAQ,CAAC;MACxB,CAAC,CAAC;MACFC,OAAO,EAAEP,OAAO,CAACO;IACnB,CAAC,CAAC,EAAEC,IAAI,CAAC,CAAC;IAEV,OAAO,CAACP,GAAG,CAACQ,IAAI,IAAI,EAAE,EAAEC,GAAG,CAAC,EAAC,8BAA+BC,CAAC,KAAKpB,GAAG,CAACqB,KAAK,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACtF;EACA,OAAOb,eAAe;AACxB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}