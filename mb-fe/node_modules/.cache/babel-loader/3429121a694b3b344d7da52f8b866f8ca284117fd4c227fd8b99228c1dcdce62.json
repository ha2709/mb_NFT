{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst configure = require('../../lib/configure');\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink(cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [`${cid}`,\n        // @ts-ignore loose types\n        dLink.Name || dLink.name || '',\n        // @ts-ignore loose types\n        (dLink.Hash || dLink.cid || '').toString() || null],\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Hash\n    } = await res.json();\n    return CID.parse(Hash);\n  }\n  return addLink;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","addLink","cid","dLink","options","res","post","signal","searchParams","arg","Name","name","Hash","toString","headers","json","parse"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/object/patch/add-link.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-ignore loose types\n          dLink.Name || dLink.name || '',\n          // @ts-ignore loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,iBAAiB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;;AAEnE;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,OAAOA,CAAEC,GAAG,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAChD,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,uBAAuB,EAAE;MAClDC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAE,CACF,GAAEP,GAAI,EAAC;QACR;QACAC,KAAK,CAACO,IAAI,IAAIP,KAAK,CAACQ,IAAI,IAAI,EAAE;QAC9B;QACA,CAACR,KAAK,CAACS,IAAI,IAAIT,KAAK,CAACD,GAAG,IAAI,EAAE,EAAEW,QAAQ,CAAC,CAAC,IAAI,IAAI,CACnD;QACD,GAAGT;MACL,CAAC,CAAC;MACFU,OAAO,EAAEV,OAAO,CAACU;IACnB,CAAC,CAAC;IAEF,MAAM;MAAEF;IAAK,CAAC,GAAG,MAAMP,GAAG,CAACU,IAAI,CAAC,CAAC;IAEjC,OAAOrB,GAAG,CAACsB,KAAK,CAACJ,IAAI,CAAC;EACxB;EAEA,OAAOX,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}