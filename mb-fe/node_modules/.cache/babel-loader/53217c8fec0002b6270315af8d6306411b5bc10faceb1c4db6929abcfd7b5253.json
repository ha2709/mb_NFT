{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst configure = require('../lib/configure');\nconst multipartRequest = require('../lib/multipart-request');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\nmodule.exports = (codecs, options) => {\n  const fn = configure(api => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      };\n      const codec = await codecs.getCodec(settings.format);\n      const serialized = codec.encode(dagNode);\n\n      // allow aborting requests on body errors\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(await multipartRequest(serialized, controller, settings.headers))\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};","map":{"version":3,"names":["CID","require","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","codecs","options","fn","api","put","dagNode","settings","format","hashAlg","inputEnc","codec","getCodec","serialized","encode","controller","signal","res","post","timeout","searchParams","headers","data","json","parse","Cid"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/dag/put.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\nmodule.exports = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      }\n\n      const codec = await codecs.getCodec(settings.format)\n      const serialized = codec.encode(dagNode)\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest(serialized, controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAM;EAAEK;AAAgB,CAAC,GAAGL,OAAO,CAAC,yBAAyB,CAAC;;AAE9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAM,MAAM,CAACC,OAAO,GAAG,CAACC,MAAM,EAAEC,OAAO,KAAK;EACpC,MAAMC,EAAE,GAAGT,SAAS,CAAEU,GAAG,IAAK;IAC5B;AACJ;AACA;IACI,MAAMC,GAAG,GAAG,MAAAA,CAAOC,OAAO,EAAEJ,OAAO,GAAG,CAAC,CAAC,KAAK;MAC3C,MAAMK,QAAQ,GAAG;QACfC,MAAM,EAAE,UAAU;QAClBC,OAAO,EAAE,UAAU;QACnBC,QAAQ,EAAE,KAAK;QACf,GAAGR;MACL,CAAC;MAED,MAAMS,KAAK,GAAG,MAAMV,MAAM,CAACW,QAAQ,CAACL,QAAQ,CAACC,MAAM,CAAC;MACpD,MAAMK,UAAU,GAAGF,KAAK,CAACG,MAAM,CAACR,OAAO,CAAC;;MAExC;MACA,MAAMS,UAAU,GAAG,IAAIjB,eAAe,CAAC,CAAC;MACxC,MAAMkB,MAAM,GAAGnB,WAAW,CAACkB,UAAU,CAACC,MAAM,EAAET,QAAQ,CAACS,MAAM,CAAC;MAE9D,MAAMC,GAAG,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAC,SAAS,EAAE;QACpCC,OAAO,EAAEZ,QAAQ,CAACY,OAAO;QACzBH,MAAM;QACNI,YAAY,EAAExB,iBAAiB,CAACW,QAAQ,CAAC;QACzC,IACE,MAAMZ,gBAAgB,CAACkB,UAAU,EAAEE,UAAU,EAAER,QAAQ,CAACc,OAAO,CAAC;MAEpE,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;MAE7B,OAAO/B,GAAG,CAACgC,KAAK,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,OAAOpB,GAAG;EACZ,CAAC,CAAC;EAEF,OAAOF,EAAE,CAACD,OAAO,CAAC;AACpB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}