{"ast":null,"code":"'use strict';\n\n/* eslint-env browser */\nconst Client = require('./core');\n\n// Set default configuration and call create function with them\n/**\n * @typedef { import(\"../types\").Options } Options\n */\n\n/**\n * @template T\n * @typedef {(client: Client, clientOptions: Options) => T} Fn\n */\n\n/**\n * @template T\n * @typedef {(clientOptions: Options) => T} Factory\n */\n\n/**\n * @template T\n * @param {Fn<T>} fn\n * @returns {Factory<T>}\n */\nconst configure = fn => {\n  return options => {\n    return fn(new Client(options), options);\n  };\n};\nmodule.exports = configure;","map":{"version":3,"names":["Client","require","configure","fn","options","module","exports"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/lib/configure.js"],"sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst Client = require('./core')\n\n// Set default configuration and call create function with them\n/**\n * @typedef { import(\"../types\").Options } Options\n */\n\n/**\n * @template T\n * @typedef {(client: Client, clientOptions: Options) => T} Fn\n */\n\n/**\n * @template T\n * @typedef {(clientOptions: Options) => T} Factory\n */\n\n/**\n * @template T\n * @param {Fn<T>} fn\n * @returns {Factory<T>}\n */\nconst configure = (fn) => {\n  return (options) => {\n    return fn(new Client(options), options)\n  }\n}\nmodule.exports = configure\n"],"mappings":"AAAA,YAAY;;AACZ;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAIC,EAAE,IAAK;EACxB,OAAQC,OAAO,IAAK;IAClB,OAAOD,EAAE,CAAC,IAAIH,MAAM,CAACI,OAAO,CAAC,EAAEA,OAAO,CAAC;EACzC,CAAC;AACH,CAAC;AACDC,MAAM,CAACC,OAAO,GAAGJ,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}