{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst Client = require('../../lib/core');\nconst Service = require('./service');\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\nclass Remote {\n  /**\n   * @param {Options} options\n   */\n  constructor(options) {\n    this.client = new Client(options);\n    /** @readonly */\n    this.service = new Service(options);\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"add\"]}\n */\nRemote.prototype.add = async function add(cid, {\n  timeout,\n  signal,\n  headers,\n  ...query\n}) {\n  const response = await this.client.post('pin/remote/add', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeAddParams({\n      cid,\n      ...query\n    })\n  });\n  return decodePin(await response.json());\n};\n\n/**\n * @type {RemotePiningAPI[\"ls\"]}\n */\nRemote.prototype.ls = async function* ls({\n  timeout,\n  signal,\n  headers,\n  ...query\n}) {\n  const response = await this.client.post('pin/remote/ls', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery(query)\n  });\n  for await (const pin of response.ndjson()) {\n    yield decodePin(pin);\n  }\n};\n\n/**\n * @type {RemotePiningAPI[\"rm\"]}\n */\nRemote.prototype.rm = async function rm({\n  timeout,\n  signal,\n  headers,\n  ...query\n}) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: false\n    })\n  });\n};\n\n/**\n * @type {RemotePiningAPI[\"rmAll\"]}\n */\nRemote.prototype.rmAll = async function ({\n  timeout,\n  signal,\n  headers,\n  ...query\n}) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: true\n    })\n  });\n};\n\n/**\n * @param {Object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nconst decodePin = ({\n  Name: name,\n  Status: status,\n  Cid: cid\n}) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`);\n  }\n};\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = ({\n  service,\n  cid,\n  name,\n  status,\n  all\n}) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = ({\n  cid,\n  service,\n  background,\n  name,\n  origins\n}) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};\nmodule.exports = Remote;","map":{"version":3,"names":["CID","require","Client","Service","toUrlSearchParams","Remote","constructor","options","client","service","prototype","add","cid","timeout","signal","headers","query","response","post","searchParams","encodeAddParams","decodePin","json","ls","encodeQuery","pin","ndjson","rm","all","rmAll","Name","name","Status","status","Cid","parse","encodeService","TypeError","encodeCID","asCID","toString","force","undefined","value","append","background","origins","params","arg","origin","module","exports"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/pin/remote/index.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst Client = require('../../lib/core')\nconst Service = require('./service')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\nclass Remote {\n  /**\n   * @param {Options} options\n   */\n  constructor (options) {\n    this.client = new Client(options)\n    /** @readonly */\n    this.service = new Service(options)\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"add\"]}\n */\nRemote.prototype.add = async function add (cid, { timeout, signal, headers, ...query }) {\n  const response = await this.client.post('pin/remote/add', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeAddParams({ cid, ...query })\n  })\n\n  return decodePin(await response.json())\n}\n\n/**\n * @type {RemotePiningAPI[\"ls\"]}\n */\nRemote.prototype.ls = async function * ls ({ timeout, signal, headers, ...query }) {\n  const response = await this.client.post('pin/remote/ls', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery(query)\n  })\n\n  for await (const pin of response.ndjson()) {\n    yield decodePin(pin)\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"rm\"]}\n */\nRemote.prototype.rm = async function rm ({ timeout, signal, headers, ...query }) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: false\n    })\n  })\n}\n\n/**\n * @type {RemotePiningAPI[\"rmAll\"]}\n */\nRemote.prototype.rmAll = async function ({ timeout, signal, headers, ...query }) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: true\n    })\n  })\n}\n\n/**\n * @param {Object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nconst decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n\nmodule.exports = Remote\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}