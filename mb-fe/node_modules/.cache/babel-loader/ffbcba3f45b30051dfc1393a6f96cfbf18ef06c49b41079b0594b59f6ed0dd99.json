{"ast":null,"code":"'use strict';\n\nconst callId = require('./id');\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = options => {\n  const id = callId(options);\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline(options = {}) {\n    const res = await id(options);\n    return Boolean(res && res.addresses && res.addresses.length);\n  }\n  return isOnline;\n};","map":{"version":3,"names":["callId","require","module","exports","options","id","isOnline","res","Boolean","addresses","length"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/is-online.js"],"sourcesContent":["'use strict'\n\nconst callId = require('./id')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = options => {\n  const id = callId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAGC,OAAO,IAAI;EAC1B,MAAMC,EAAE,GAAGL,MAAM,CAACI,OAAO,CAAC;;EAE1B;AACF;AACA;EACE,eAAeE,QAAQA,CAAEF,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,MAAMG,GAAG,GAAG,MAAMF,EAAE,CAACD,OAAO,CAAC;IAE7B,OAAOI,OAAO,CAACD,GAAG,IAAIA,GAAG,CAACE,SAAS,IAAIF,GAAG,CAACE,SAAS,CAACC,MAAM,CAAC;EAC9D;EACA,OAAOJ,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}