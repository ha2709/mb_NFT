{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat(path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    data.WithLocality = data.WithLocality || false;\n    return toCoreInterface(toCamelWithMetadata(data));\n  }\n  return stat;\n});\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface(entry) {\n  entry.cid = CID.parse(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","stat","path","options","res","post","signal","searchParams","arg","headers","data","json","WithLocality","toCoreInterface","entry","cid","parse","hash"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/files/stat.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(toCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAsC,CAAC;AAC3E,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,IAAIA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACvC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,YAAY,EAAE;MACvCC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEV,iBAAiB,CAAC;QAC9BW,GAAG,EAAEN,IAAI;QACT,GAAGC;MACL,CAAC,CAAC;MACFM,OAAO,EAAEN,OAAO,CAACM;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;IAE7BD,IAAI,CAACE,YAAY,GAAGF,IAAI,CAACE,YAAY,IAAI,KAAK;IAC9C,OAAOC,eAAe,CAAClB,mBAAmB,CAACe,IAAI,CAAC,CAAC;EACnD;EACA,OAAOT,IAAI;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASY,eAAeA,CAAEC,KAAK,EAAE;EAC/BA,KAAK,CAACC,GAAG,GAAGtB,GAAG,CAACuB,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC;EACjC,OAAOH,KAAK,CAACG,IAAI;EACjB,OAAOH,KAAK;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}