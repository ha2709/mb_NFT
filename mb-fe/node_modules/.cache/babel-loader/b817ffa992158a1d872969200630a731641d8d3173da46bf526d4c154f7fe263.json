{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst configure = require('./lib/configure');\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function* get(path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    };\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel;\n      delete opts.compressionLevel;\n    }\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    });\n    yield* res.iterator();\n  }\n  return get;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","get","path","options","opts","arg","Uint8Array","decode","compressionLevel","res","post","signal","searchParams","headers","iterator"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/get.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,4BAA4B,CAAC;;AAE/D;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,GAAGA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxC;IACA,MAAMC,IAAI,GAAG;MACXC,GAAG,EAAG,GAAEH,IAAI,YAAYI,UAAU,GAAGZ,GAAG,CAACa,MAAM,CAACL,IAAI,CAAC,GAAGA,IAAK,EAAC;MAC9D,GAAGC;IACL,CAAC;IAED,IAAIC,IAAI,CAACI,gBAAgB,EAAE;MACzBJ,IAAI,CAAC,mBAAmB,CAAC,GAAGA,IAAI,CAACI,gBAAgB;MACjD,OAAOJ,IAAI,CAACI,gBAAgB;IAC9B;IAEA,MAAMC,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,KAAK,EAAE;MAChCC,MAAM,EAAER,OAAO,CAACQ,MAAM;MACtBC,YAAY,EAAEf,iBAAiB,CAACO,IAAI,CAAC;MACrCS,OAAO,EAAEV,OAAO,CAACU;IACnB,CAAC,CAAC;IAEF,OAAQJ,GAAG,CAACK,QAAQ,CAAC,CAAC;EACxB;EAEA,OAAOb,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}