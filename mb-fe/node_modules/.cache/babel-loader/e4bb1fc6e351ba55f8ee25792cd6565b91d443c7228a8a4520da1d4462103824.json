{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst multipartRequest = require('../lib/multipart-request');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put(data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    let res;\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(await multipartRequest(data, controller, options.headers))\n      });\n      res = await response.json();\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, {\n          ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, {\n          ...options,\n          format: 'cbor'\n        });\n      }\n      throw err;\n    }\n    return CID.parse(res.Key);\n  }\n  return put;\n});","map":{"version":3,"names":["CID","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","put","data","options","controller","signal","res","response","post","searchParams","headers","json","err","format","parse","Key"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/block/put.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest(data, controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAM;EAAEK;AAAgB,CAAC,GAAGL,OAAO,CAAC,yBAAyB,CAAC;;AAE9D;AACA;AACA;AACA;;AAEAM,MAAM,CAACC,OAAO,GAAGL,SAAS,CAACM,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACtC;IACA,MAAMC,UAAU,GAAG,IAAIP,eAAe,CAAC,CAAC;IACxC,MAAMQ,MAAM,GAAGT,WAAW,CAACQ,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;IAE7D,IAAIC,GAAG;IACP,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,WAAW,EAAE;QAC3CH,MAAM,EAAEA,MAAM;QACdI,YAAY,EAAEd,iBAAiB,CAACQ,OAAO,CAAC;QACxC,IACE,MAAMV,gBAAgB,CAACS,IAAI,EAAEE,UAAU,EAAED,OAAO,CAACO,OAAO,CAAC;MAE7D,CAAC,CAAC;MACFJ,GAAG,GAAG,MAAMC,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ;MACA;MACA,IAAIT,OAAO,CAACU,MAAM,KAAK,QAAQ,EAAE;QAC/B,OAAOZ,GAAG,CAACC,IAAI,EAAE;UAAE,GAAGC,OAAO;UAAEU,MAAM,EAAE;QAAW,CAAC,CAAC;MACtD,CAAC,MAAM,IAAIV,OAAO,CAACU,MAAM,KAAK,UAAU,EAAE;QACxC,OAAOZ,GAAG,CAACC,IAAI,EAAE;UAAE,GAAGC,OAAO;UAAEU,MAAM,EAAE;QAAO,CAAC,CAAC;MAClD;MAEA,MAAMD,GAAG;IACX;IAEA,OAAOrB,GAAG,CAACuB,KAAK,CAACR,GAAG,CAACS,GAAG,CAAC;EAC3B;EAEA,OAAOd,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}