{"ast":null,"code":"'use strict';\n\nconst modeToString = require('../lib/mode-to-string');\nconst parseMtime = require('../lib/parse-mtime');\nconst configure = require('../lib/configure');\nconst multipartRequest = require('../lib/multipart-request');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write(path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(await multipartRequest({\n        content: input,\n        path: 'arg',\n        mode: modeToString(options.mode),\n        mtime: parseMtime(options.mtime)\n      }, controller, options.headers))\n    });\n    await res.text();\n  }\n  return write;\n});","map":{"version":3,"names":["modeToString","require","parseMtime","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","write","path","input","options","controller","signal","res","post","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","text"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/files/write.js"],"sourcesContent":["'use strict'\n\nconst modeToString = require('../lib/mode-to-string')\nconst parseMtime = require('../lib/parse-mtime')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest({\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAMC,UAAU,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAChD,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAM;EAAEM;AAAgB,CAAC,GAAGN,OAAO,CAAC,yBAAyB,CAAC;;AAE9D;AACA;AACA;AACA;;AAEAO,MAAM,CAACC,OAAO,GAAGN,SAAS,CAACO,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,KAAKA,CAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC/C;IACA,MAAMC,UAAU,GAAG,IAAIR,eAAe,CAAC,CAAC;IACxC,MAAMS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;IAE7D,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,aAAa,EAAE;MACxCF,MAAM;MACNG,YAAY,EAAEd,iBAAiB,CAAC;QAC9Be,GAAG,EAAER,IAAI;QACTS,cAAc,EAAE,IAAI;QACpBC,KAAK,EAAER,OAAO,CAACS,MAAM;QACrB,GAAGT;MACL,CAAC,CAAC;MACF,IACE,MAAMV,gBAAgB,CAAC;QACrBoB,OAAO,EAAEX,KAAK;QACdD,IAAI,EAAE,KAAK;QACXa,IAAI,EAAEzB,YAAY,CAACc,OAAO,CAACW,IAAI,CAAC;QAChCC,KAAK,EAAExB,UAAU,CAACY,OAAO,CAACY,KAAK;MACjC,CAAC,EAAEX,UAAU,EAAED,OAAO,CAACa,OAAO,CAAC;IAEnC,CAAC,CAAC;IAEF,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;EAClB;EACA,OAAOjB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}