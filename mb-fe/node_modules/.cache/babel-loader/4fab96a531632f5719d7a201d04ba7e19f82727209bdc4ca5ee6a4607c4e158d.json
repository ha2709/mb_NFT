{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n  return pin;\n}\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function* ls(options = {}) {\n    /** @type {any[]} */\n    let paths = [];\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n        return;\n      }\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n  return ls;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","module","exports","api","ls","options","paths","Array","isArray","res","post","signal","searchParams","arg","map","path","stream","headers","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/pin/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,KAAKA,CAAEC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EACnC;EACA,MAAMC,GAAG,GAAG;IACVH,IAAI;IACJC,GAAG,EAAEN,GAAG,CAACS,KAAK,CAACH,GAAG;EACpB,CAAC;EAED,IAAIC,QAAQ,EAAE;IACZC,GAAG,CAACD,QAAQ,GAAGA,QAAQ;EACzB;EAEA,OAAOC,GAAG;AACZ;AAEAE,MAAM,CAACC,OAAO,GAAGT,SAAS,CAACU,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,EAAEA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC;IACA,IAAIC,KAAK,GAAG,EAAE;IAEd,IAAID,OAAO,CAACC,KAAK,EAAE;MACjBA,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,KAAK,CAAC,GAAGD,OAAO,CAACC,KAAK,GAAG,CAACD,OAAO,CAACC,KAAK,CAAC;IACxE;IAEA,MAAMG,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,QAAQ,EAAE;MACnCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAElB,iBAAiB,CAAC;QAC9B,GAAGW,OAAO;QACVQ,GAAG,EAAEP,KAAK,CAACQ,GAAG,CAACC,IAAI,IAAK,GAAEA,IAAK,EAAC,CAAC;QACjCC,MAAM,EAAE;MACV,CAAC,CAAC;MACFC,OAAO,EAAEZ,OAAO,CAACY;IACnB,CAAC,CAAC;IAEF,WAAW,MAAMlB,GAAG,IAAIU,GAAG,CAACS,MAAM,CAAC,CAAC,EAAE;MACpC,IAAInB,GAAG,CAACoB,IAAI,EAAE;QAAE;QACd,KAAK,MAAMtB,GAAG,IAAIuB,MAAM,CAACC,IAAI,CAACtB,GAAG,CAACoB,IAAI,CAAC,EAAE;UACvC,MAAMxB,KAAK,CAACI,GAAG,CAACoB,IAAI,CAACtB,GAAG,CAAC,CAACyB,IAAI,EAAEzB,GAAG,EAAEE,GAAG,CAACoB,IAAI,CAACtB,GAAG,CAAC,CAAC0B,QAAQ,CAAC;QAC9D;QACA;MACF;MAEA,MAAM5B,KAAK,CAACI,GAAG,CAACuB,IAAI,EAAEvB,GAAG,CAACyB,GAAG,EAAEzB,GAAG,CAACwB,QAAQ,CAAC;IAC9C;EACF;EACA,OAAOnB,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}