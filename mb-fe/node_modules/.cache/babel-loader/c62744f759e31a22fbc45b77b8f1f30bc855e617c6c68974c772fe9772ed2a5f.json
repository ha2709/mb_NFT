{"ast":null,"code":"'use strict';\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\nconst multipartRequest = require('../lib/multipart-request');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\nconst abortSignal = require('../lib/abort-signal');\nconst {\n  AbortController\n} = require('native-abort-controller');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers))\n    });\n    await res.text();\n  };\n  return replace;\n});","map":{"version":3,"names":["fromString","uint8ArrayFromString","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","replace","config","options","controller","signal","res","post","searchParams","JSON","stringify","headers","text"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/config/replace.js"],"sourcesContent":["'use strict'\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,UAAU,EAAEC;AAAqB,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAC/E,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;AAChE,MAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;AAClD,MAAM;EAAEK;AAAgB,CAAC,GAAGL,OAAO,CAAC,yBAAyB,CAAC;;AAE9D;AACA;AACA;AACA;;AAEAM,MAAM,CAACC,OAAO,GAAGL,SAAS,CAACM,GAAG,IAAI;EAChC;AACF;AACA;EACE,MAAMC,OAAO,GAAG,MAAAA,CAAOC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC9C;IACA,MAAMC,UAAU,GAAG,IAAIP,eAAe,CAAC,CAAC;IACxC,MAAMQ,MAAM,GAAGT,WAAW,CAACQ,UAAU,CAACC,MAAM,EAAEF,OAAO,CAACE,MAAM,CAAC;IAE7D,MAAMC,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,gBAAgB,EAAE;MAC3CF,MAAM;MACNG,YAAY,EAAEb,iBAAiB,CAACQ,OAAO,CAAC;MACxC,IACE,MAAMV,gBAAgB,CAACF,oBAAoB,CAACkB,IAAI,CAACC,SAAS,CAACR,MAAM,CAAC,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACQ,OAAO,CAAC;IAErG,CAAC,CAAC;IAEF,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;EAClB,CAAC;EAED,OAAOX,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}