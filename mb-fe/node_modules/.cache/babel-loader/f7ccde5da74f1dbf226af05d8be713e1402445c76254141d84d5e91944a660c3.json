{"ast":null,"code":"'use strict';\n\n/* eslint-env browser */\nconst {\n  CID\n} = require('multiformats/cid');\nconst {\n  multiaddr\n} = require('multiaddr');\nconst globSource = require('ipfs-utils/src/files/glob-source');\nconst urlSource = require('ipfs-utils/src/files/url-source');\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs');\nconst Multihashes = require('ipfs-core-utils/src/multihashes');\nconst Multibases = require('ipfs-core-utils/src/multibases');\nconst dagPb = require('@ipld/dag-pb');\nconst dagCbor = require('@ipld/dag-cbor');\nconst {\n  identity\n} = require('multiformats/hashes/identity');\nconst {\n  bases,\n  hashes,\n  codecs\n} = require('multiformats/basics');\n\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nfunction create(options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n\n  /** @type {MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n  [dagPb, dagCbor, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n\n  /** @type {MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(multicodecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(multicodecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  };\n  return client;\n}\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  globSource,\n  urlSource\n};","map":{"version":3,"names":["CID","require","multiaddr","globSource","urlSource","Multicodecs","Multihashes","Multibases","dagPb","dagCbor","identity","bases","hashes","codecs","create","options","id","name","code","encode","decode","multibaseCodecs","Object","values","ipld","forEach","base","push","multibases","loadBase","blockCodecs","concat","codec","multicodecs","loadCodec","multihashHashers","hashers","hasher","multihashes","loadHasher","client","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","isOnline","key","log","ls","mount","object","pin","ping","pubsub","refs","repo","resolve","start","stats","stop","swarm","version","module","exports"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/index.js"],"sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst { CID } = require('multiformats/cid')\nconst { multiaddr } = require('multiaddr')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs')\nconst Multihashes = require('ipfs-core-utils/src/multihashes')\nconst Multibases = require('ipfs-core-utils/src/multibases')\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst { identity } = require('multiformats/hashes/identity')\nconst { bases, hashes, codecs } = require('multiformats/basics')\n\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nfunction create (options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPb, dagCbor, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(multicodecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(multicodecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  globSource,\n  urlSource\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}