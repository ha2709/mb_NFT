{"ast":null,"code":"'use strict';\n\nconst toCamel = require('./lib/object-to-camel');\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst configure = require('./lib/configure');\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id(options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    const output = {\n      ...toCamel(data)\n    };\n    if (output.addresses) {\n      output.addresses = output.addresses.map(( /** @type {string} */ma) => new Multiaddr(ma));\n    }\n\n    // @ts-ignore server output is not typed\n    return output;\n  }\n  return id;\n});","map":{"version":3,"names":["toCamel","require","Multiaddr","configure","toUrlSearchParams","module","exports","api","id","options","res","post","signal","searchParams","arg","peerId","toString","undefined","headers","data","json","output","addresses","map","ma"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/id.js"],"sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...toCamel(data)\n    }\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => new Multiaddr(ma))\n    }\n\n    // @ts-ignore server output is not typed\n    return output\n  }\n  return id\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAChD,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAA4B,CAAC;;AAE/D;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,EAAEA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC/B,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,IAAI,EAAE;MAC/BC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAET,iBAAiB,CAAC;QAC9BU,GAAG,EAAEL,OAAO,CAACM,MAAM,GAAGN,OAAO,CAACM,MAAM,CAACC,QAAQ,CAAC,CAAC,GAAGC,SAAS;QAC3D,GAAGR;MACL,CAAC,CAAC;MACFS,OAAO,EAAET,OAAO,CAACS;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAE7B,MAAMC,MAAM,GAAG;MACb,GAAGrB,OAAO,CAACmB,IAAI;IACjB,CAAC;IAED,IAAIE,MAAM,CAACC,SAAS,EAAE;MACpBD,MAAM,CAACC,SAAS,GAAGD,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,EAAC,qBAAsBC,EAAE,KAAK,IAAItB,SAAS,CAACsB,EAAE,CAAC,CAAC;IAC1F;;IAEA;IACA,OAAOH,MAAM;EACf;EACA,OAAOb,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}