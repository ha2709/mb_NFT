{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\nconst resolve = require('../lib/resolve');\nconst first = require('it-first');\nconst last = require('it-last');\nconst errCode = require('err-code');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\nmodule.exports = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = require('../block/get')(opts);\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));\n        /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n        const result = entry;\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n        return result;\n      }\n      const codec = await codecs.getCodec(cid.code);\n      const block = await getBlock(cid, options);\n      const node = codec.decode(block);\n      return {\n        value: node,\n        remainderPath: ''\n      };\n    };\n    return get;\n  });\n  return fn(options);\n};","map":{"version":3,"names":["configure","require","resolve","first","last","errCode","module","exports","codecs","options","fn","api","opts","getBlock","get","cid","path","entry","localResolve","result","Error","codec","getCodec","code","block","node","decode","value","remainderPath"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst resolve = require('../lib/resolve')\nconst first = require('it-first')\nconst last = require('it-last')\nconst errCode = require('err-code')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\nmodule.exports = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = require('../block/get')(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAU,CAAC;AACjC,MAAMG,IAAI,GAAGH,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAU,CAAC;;AAEnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAK,MAAM,CAACC,OAAO,GAAG,CAACC,MAAM,EAAEC,OAAO,KAAK;EACpC,MAAMC,EAAE,GAAGV,SAAS,CAAC,CAACW,GAAG,EAAEC,IAAI,KAAK;IAClC,MAAMC,QAAQ,GAAGZ,OAAO,CAAC,cAAc,CAAC,CAACW,IAAI,CAAC;;IAE9C;AACJ;AACA;IACI,MAAME,GAAG,GAAG,MAAAA,CAAOC,GAAG,EAAEN,OAAO,GAAG,CAAC,CAAC,KAAK;MACvC,IAAIA,OAAO,CAACO,IAAI,EAAE;QAChB,MAAMC,KAAK,GAAGR,OAAO,CAACS,YAAY,GAC9B,MAAMf,KAAK,CAACD,OAAO,CAACa,GAAG,EAAEN,OAAO,CAACO,IAAI,EAAER,MAAM,EAAEK,QAAQ,EAAEJ,OAAO,CAAC,CAAC,GAClE,MAAML,IAAI,CAACF,OAAO,CAACa,GAAG,EAAEN,OAAO,CAACO,IAAI,EAAER,MAAM,EAAEK,QAAQ,EAAEJ,OAAO,CAAC,CAAC;QACrE;QACA,MAAMU,MAAM,GAAIF,KAAM;QAEtB,IAAI,CAACE,MAAM,EAAE;UACX,MAAMd,OAAO,CAAC,IAAIe,KAAK,CAAC,WAAW,CAAC,EAAE,eAAe,CAAC;QACxD;QAEA,OAAOD,MAAM;MACf;MAEA,MAAME,KAAK,GAAG,MAAMb,MAAM,CAACc,QAAQ,CAACP,GAAG,CAACQ,IAAI,CAAC;MAC7C,MAAMC,KAAK,GAAG,MAAMX,QAAQ,CAACE,GAAG,EAAEN,OAAO,CAAC;MAC1C,MAAMgB,IAAI,GAAGJ,KAAK,CAACK,MAAM,CAACF,KAAK,CAAC;MAEhC,OAAO;QACLG,KAAK,EAAEF,IAAI;QACXG,aAAa,EAAE;MACjB,CAAC;IACH,CAAC;IAED,OAAOd,GAAG;EACZ,CAAC,CAAC;EAEF,OAAOJ,EAAE,CAACD,OAAO,CAAC;AACpB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}