{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n  return set;\n});\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"names":["configure","require","toUrlSearchParams","module","exports","api","set","key","value","options","Error","params","encodeParam","res","post","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/config/set.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,MAAMC,GAAG,GAAG,MAAAA,CAAOC,GAAG,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC9C,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIG,KAAK,CAAC,kBAAkB,CAAC;IACrC;IAEA,MAAMC,MAAM,GAAG;MACb,GAAGF,OAAO;MACV,GAAGG,WAAW,CAACL,GAAG,EAAEC,KAAK;IAC3B,CAAC;IAED,MAAMK,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,QAAQ,EAAE;MACnCC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EAAEd,iBAAiB,CAACS,MAAM,CAAC;MACvCM,OAAO,EAAER,OAAO,CAACQ;IACnB,CAAC,CAAC;IAEF,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;EAClB,CAAC;EAED,OAAOZ,GAAG;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,MAAMM,WAAW,GAAGA,CAACL,GAAG,EAAEC,KAAK,KAAK;EAClC,QAAQ,OAAOA,KAAK;IAClB,KAAK,SAAS;MACZ,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAG,EAAEC,KAAK,CAACY,QAAQ,CAAC,CAAC,CAAC;QAAEC,IAAI,EAAE;MAAK,CAAC;IACrD,KAAK,QAAQ;MACX,OAAO;QAAEF,GAAG,EAAE,CAACZ,GAAG,EAAEC,KAAK;MAAE,CAAC;IAC9B;MACE,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAG,EAAEe,IAAI,CAACC,SAAS,CAACf,KAAK,CAAC,CAAC;QAAEgB,IAAI,EAAE;MAAK,CAAC;EAC5D;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}