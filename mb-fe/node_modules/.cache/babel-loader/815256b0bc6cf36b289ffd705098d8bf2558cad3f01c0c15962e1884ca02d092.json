{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\nconst toCamel = require('../lib/object-to-camel');\nconst configure = require('../lib/configure');\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function* provide(cids, options = {\n    recursive: false\n  }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids];\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      if (message.responses) {\n        message.responses = message.responses.map(( /** @type {{ ID: string, Addrs: string[] }} */{\n          ID,\n          Addrs\n        }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(( /** @type {string} **/a) => new Multiaddr(a))\n        }));\n      } else {\n        message.responses = [];\n      }\n      yield message;\n    }\n  }\n  return provide;\n});","map":{"version":3,"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","module","exports","api","provide","cids","options","recursive","cidArr","Array","isArray","res","post","signal","searchParams","arg","map","cid","toString","headers","message","ndjson","responses","ID","Addrs","id","addrs","a"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-http-client/src/dht/provide.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n\n  return provide\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACjD,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC7C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAA6B,CAAC;;AAEhE;AACA;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,OAAOA,CAAEC,IAAI,EAAEC,OAAO,GAAG;IAAEC,SAAS,EAAE;EAAM,CAAC,EAAE;IAC9D;IACA,MAAMC,MAAM,GAAGC,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;IAElD,MAAMM,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,aAAa,EAAE;MACxCC,MAAM,EAAEP,OAAO,CAACO,MAAM;MACtBC,YAAY,EAAEd,iBAAiB,CAAC;QAC9Be,GAAG,EAAEP,MAAM,CAACQ,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,QAAQ,CAAC,CAAC,CAAC;QACtC,GAAGZ;MACL,CAAC,CAAC;MACFa,OAAO,EAAEb,OAAO,CAACa;IACnB,CAAC,CAAC;IAEF,WAAW,IAAIC,OAAO,IAAIT,GAAG,CAACU,MAAM,CAAC,CAAC,EAAE;MACtCD,OAAO,GAAGtB,OAAO,CAACsB,OAAO,CAAC;MAC1B,IAAIA,OAAO,CAACE,SAAS,EAAE;QACrBF,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,CAACN,GAAG,CAAC,EAAC,8CAA+C;UAAEO,EAAE;UAAEC;QAAM,CAAC,MAAM;UAC3GC,EAAE,EAAEF,EAAE;UACNG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAE,EAAER,GAAG,CAAC,EAAC,sBAAuBW,CAAC,KAAK,IAAI/B,SAAS,CAAC+B,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;MACL,CAAC,MAAM;QACLP,OAAO,CAACE,SAAS,GAAG,EAAE;MACxB;MACA,MAAMF,OAAO;IACf;EACF;EAEA,OAAOhB,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}