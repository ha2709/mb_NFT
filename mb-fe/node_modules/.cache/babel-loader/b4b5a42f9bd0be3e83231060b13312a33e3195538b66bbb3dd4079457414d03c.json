{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\nconst browserStreamToIt = require('browser-readablestream-to-it');\nconst itPeekable = require('it-peekable');\nconst map = require('it-map');\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} = require('./utils');\nconst {\n  parseMtime,\n  parseMode\n} = require('ipfs-unixfs');\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {import('ipfs-core-types/src/utils').ImportCandidateStream} input\n * @param {(content:ToContent) => AsyncIterable<Uint8Array>} normaliseContent\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function* normaliseInput(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n\n    /** @type {any} value **/\n    const {\n      value,\n      done\n    } = await peekable.peek();\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield* [];\n      return;\n    }\n    peekable.push(value);\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value) || isBytes(value)) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n\n    // (Async)Iterable<Blob>\n    // (Async)Iterable<String>\n    // (Async)Iterable<{ path, content }>\n    if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\n      yield* map(peekable, ( /** @type {ImportCandidate} */value) => toFileObject(value, normaliseContent));\n      return;\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value)) {\n      yield* map(peekable, ( /** @type {ImportCandidate} */value) => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n};\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => AsyncIterable<Uint8Array>} normaliseContent\n */\nasync function toFileObject(input, normaliseContent) {\n  // @ts-ignore - Those properties don't exist on most input types\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    // @ts-ignore TODO vmx 2021-03-30 enable again\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    // Not already a file object with path or content prop\n    // @ts-ignore - input still can be different ToContent\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}","map":{"version":3,"names":["errCode","require","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","module","exports","normaliseInput","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","path","mode","mtime","content","file"],"sources":["/home/ha/Downloads/programs/27-10/mb_NFT/mb-fe/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-input.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst itPeekable = require('it-peekable')\nconst map = require('it-map')\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} = require('./utils')\nconst {\n  parseMtime,\n  parseMode\n} = require('ipfs-unixfs')\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {import('ipfs-core-types/src/utils').ImportCandidateStream} input\n * @param {(content:ToContent) => AsyncIterable<Uint8Array>} normaliseContent\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function * normaliseInput (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value) || isBytes(value)) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<Blob>\n    // (Async)Iterable<String>\n    // (Async)Iterable<{ path, content }>\n    if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => AsyncIterable<Uint8Array>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-ignore - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n  // @ts-ignore TODO vmx 2021-03-30 enable again\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-ignore - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}